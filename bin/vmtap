#!/usr/bin/env ruby

require 'rubygems'
require 'commander/import'
require 'randexp'
require_relative '../lib/vmtap/collect'
require_relative '../lib/vmtap/modify'

program :version, '0.0.1'
program :description, 'Manage droplets with ease'

command :create do |c|
  c.syntax = 'vmtap create [options]'
  c.summary = 'Create a droplet'
  c.option '-n', '--name NAME', String, 'Specify name of new VM'
  c.option '-f', '--file FILE', String, 'Specify VM spec file'
  c.action do |args, options|
    unless file = options.file
      file = 'vms/default.yaml'
    end

    unless name = options.name
      puts "Generating random hostname"
      name = /\w{8}/.gen.downcase
    end

    execute = Vmtap::Modify.new
    execute.create(name, file)
  end
end

command :delete do |c|
  c.syntax = 'vmtap delete [options]'
  c.summary = 'Delete a droplet'
  c.description = ''
  c.option '-n', '--name NAME', String, 'Specify name of VM to delete'
  c.option '-f', '--force','Force delete'
  c.option '-a', '--all', 'Delete ALL VMs; use with caution!'
  c.action do |args, options|
    abort("Specify name of VM: vmtap delete -n '<name>'") unless options.name
    name = options.name

    if options.force
      force = true
    else
      force = false
    end

    execute = Vmtap::Modify.new
    execute.delete(name, force)
  end
end

command :destroy do |c|
  c.syntax = 'vmtap destroy'
  c.summary = 'Destroy everything: use with caution!'
  c.description = ''
  c.action do |args, options|
    execute = Vmtap::Modify.new
    execute.delete_all
  end
end

command :inventory do |c|
  c.syntax = 'vmtap inventory'
  c.summary = 'Display all droplet names & IDs'
  c.action do |args, options|
    execute = Vmtap::Collect.new
    execute.inventory
  end
end
